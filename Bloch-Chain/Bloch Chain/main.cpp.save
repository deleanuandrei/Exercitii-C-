#include <iostream>
#include <vector>
#include <ctime>
#include <algorithm>

using namespace std;

class Transaction
{
public:
    Transaction(){
    }
    Transaction(string sender, string recipient, double quantity){
        txSender = sender;
        txRecipient = recipient;
        txQuantity = quantity;
    }
    string getTxSender(){
        return txSender;
    }
    string getTxRecipient(){
        return txRecipient;
    }
    double getTxQuantity(){
        return txQuantity;
    }
protected:
    string txSender, txRecipient;
    double txQuantity;
};

class CryptoBlock
{
public:
    CryptoBlock(int prevHash, string sender, string recipient, double quantity){

    }
    int getIndex(){
        return index;
    }
    string getTimeStamp(){
        return timeStamp;
    }
    string getPreviousBlockHash(){
        return previousBlockHash;
    }
    string getBlockHash()
    {
        return blockHash;
    }
    Transaction getTx();
private:
    string calculateHash()
    {
        hash<string> str_hash;
        return to_string(str_hash(timeStamp + previousBlockHash
                                  + getTx().getTxSender() + getTx().getTxRecipient()
                                  + to_string(getTx().getTxQuantity())));
    }
    string now()
    {
        time_t t = time(0);
        string str = ctime(&t);
        str.erase(std::remove(str.begin(), str.end(), '\n'), str.end());
        return str;
    }
    int index;
    string timeStamp;
    string previousBlockHash;
    string blockHash;
    Transaction tx;
};

class CryptoBlockchain
{
public:
    CryptoBlockchain();
    void addNewBlock(string sender, string recipient, double quantity){

    }
    vector<CryptoBlock> getChain(){

    }
private:
    vector<CryptoBlock> chain;
    string getLastHash();
    int getLastIndex();
};
ostream& operator<<(ostream& o, CryptoBlock& b)
{
    o << b.
}
ostream& operator<<(ostream& o, CryptoBlockchain& bc)
{
//supraincarcarea operatorului << pentru clasa CryptoBlockchain
//se itereaza vectorul chain si se afiseaza detaliile fiecarui bloc
}
int main()
{
    CryptoBlockchain myChain;
    myChain.addNewBlock("John", "Bob", 10);
    myChain.addNewBlock("Bob", "Sandra", 15.5);
    cout << myChain;
    return 0;
}
